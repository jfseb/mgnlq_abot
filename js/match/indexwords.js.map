{"version":3,"sources":["/projects/nodejs/botbuilder/mgnlq_abot/src/../src/match/indexwords.ts"],"names":[],"mappings":";;AAGA,oCAAoC;AACpC,yBAAyB;AACzB,+BAA+B;AAE/B,MAAM,QAAQ,GAAG,KAAK,CAAC,YAAY,CAAC,CAAC;AAErC,IAAI,UAAU,GAAG,EAAE,CAAC;AAEpB,SAAgB,MAAM,CAAC,EAAE;IACvB,UAAU,GAAG,EAAE,CAAC;AAClB,CAAC;AAFD,wBAEC;AAED,IAAI,OAAO,GAAG,CAAC,eAAe,EAAE,eAAe,EAAE,UAAU,CAAC,CAAC;AAC7D,SAAgB,UAAU,CAAC,KAAc,EAAC,aAAsB,EAAE,aAAsB,EAAE,QAAgB,EAAE,QAA+C;IACzJ,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,MAAkB,EAAE,MAAM,EAAE,EAAE;QAC1D,IAAI,MAAM,GAAI;YACZ,aAAa,EAAG,aAAa;YAC7B,aAAa,EAAG,aAAa;YAC7B,QAAQ,EAAG,QAAQ;SACpB,CAAA;QACD,IAAI,GAAG,EAAE;YACP,+BAA+B;YAC/B,4BAA4B;YAC5B,QAAQ,CAAC,wBAAwB,GAAG,GAAG,CAAC,CAAC;YACzC,QAAQ,CAAC,GAAG,CAAC,CAAC;SACf;aAAM;YACL,IAAI,KAAK,GAAE,qBAAqB,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI;gBAC3D,2DAA2D;gBAC3D,WAAW;gBACX,cAAc;gBACb,OAAO,CAAC,GAAG,CAAC,UAAS,CAAC,EAAC,MAAM,IAAI,OAAO,GAAG,GAAG,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;YAE/E,IAAI,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,UAAS,IAAI;gBACjC,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC;YACtB,CAAC,CAAC,CAAC;YACH,sEAAsE;YACzE,MAAM,CAAC,KAAK,CAAC,KAAK,EAAC,MAAM,EACZ,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE;gBACzB,MAAM,EAAE,CAAC;gBACT,IAAI,GAAG,EAAE;oBACR,6BAA6B;oBAC7B,QAAQ,CAAC,iCAAiC,GAAG,GAAG,GAAG,IAAI;wBACpD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;oBACrB,QAAQ,CAAC,GAAG,CAAC,CAAC;iBACf;qBAAM;oBACP,0BAA0B;oBACxB,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;iBACtB;YACL,CAAC,CAAC,CAAC;SACJ;IACH,CAAC,CAAC,CAAC;AACP,CAAC;AAtCD,gCAsCC;AAGD,SAAgB,SAAS,CAAC,KAAc,EAAG,KAAqB;IAC9D,OAAO;IACP,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,UAAS,KAAK;QACjC,IAAG,KAAK,CAAC,IAAI,KAAK,MAAM,CAAC,YAAY,CAAC,IAAI,EAAE;YAC1C,UAAU,CAAC,KAAK,EAAE,KAAK,CAAC,aAAa,EAAE,KAAK,CAAC,aAAa,EAAE,KAAK,CAAC,QAAQ,EAAE,cAAY,CAAC,CAAC,CAAC;SAC5F;IACH,CAAC,CAAC,CAAC;AAEL,CAAC;AARD,8BAQC","file":"indexwords.js","sourcesContent":["\n\n\nimport * as IMatch from './ifmatch';\nimport * as pg from 'pg';\nimport * as debug from 'debug';\n\nconst debuglog = debug('indexwords');\n\nvar pgInstance = pg;\n\nexport function mockPG(pg) {\n  pgInstance = pg;\n}\n\nvar columns = ['lowercaseword', 'matchedstring', 'category'];\nexport function insertWord(dburl : string,lowercaseword : string, matchedstring : string, category: string, callback : (err: Error, res? : boolean) => void ) {\n  pgInstance.connect(dburl, (err, client : pg.Client, pgDone) => {\n      var oEntry =  {\n        matchedstring : matchedstring,\n        lowercaseword : lowercaseword,\n        category : category\n      }\n      if (err) {\n        // failed to acquire connection\n        //logger.emit('error', err);\n        debuglog('Error connecting to db' + err);\n        callback(err);\n      } else {\n        var query =`INSERT INTO words (` + columns.join(\",\") + \") \" +\n        //   (convid, sessionid, user, message, response, meta) ` +\n        \"VALUES ( \"  +\n        // $1, $2, ...\n         columns.map(function(o,iIndex) { return \"$\" + (iIndex+1); }).join(\", \") + \")\";\n\n        var values = columns.map(function(sCol) {\n             return oEntry[sCol];\n           });\n           //  [level, msg, meta instanceof Array ? JSON.stringify(meta) : meta],\n        client.query(query,values,\n                     (err, result) => {\n            pgDone();\n            if (err) {\n             // logger.emit('error', err);\n             debuglog('Error inserting record into db ' + err + '\\n' +\n                values.join(\"\\n\"));\n              callback(err);\n            } else {\n            //  logger.emit('logged');\n              callback(null, true);\n            }\n        });\n      }\n    });\n}\n\n\nexport function dumpWords(dburl : string,  model: IMatch.IModels) {\n  // move\n  model.mRules.forEach(function(mRule) {\n    if(mRule.type === IMatch.EnumRuleType.WORD) {\n      insertWord(dburl, mRule.lowercaseword, mRule.matchedString, mRule.category, function() {});\n    }\n  });\n\n}"],"sourceRoot":"ABC"}