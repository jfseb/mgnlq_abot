{"version":3,"sources":["/projects/nodejs/botbuilder/mgnlq_abot/src/../src/match/whatis.ts"],"names":[],"mappings":"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","file":"whatis.js","sourcesContent":["/**\n *\n * @module jfseb.fdevstart.analyze\n * @file analyze.ts\n * @copyright (c) 2016 Gerd Forstmann\n */\n\n\nimport { InputFilter as InputFilter} from 'mgnlq_er';\nimport { MongoQ as MongoQ } from 'mgnlq_parser1';\nimport * as ListAll from './listall';\n\n\nimport * as debug from 'debug';\n\nvar debuglog = debug('whatis');\nvar debuglogV = debug('whatVis');\nvar perflog = debug('perf');\n\n\nimport { ErError as ErError} from 'mgnlq_er';\n\nimport { ErBase as ErBase} from 'mgnlq_er';\n\n\nexport function mockDebug(o) {\n  debuglog = o;\n  debuglogV = o;\n  perflog = o;\n}\n\n\nimport * as _ from 'lodash';\n\nimport * as IMatch from './ifmatch';\n\n//import * as Match from './match';\n//import * as Toolmatcher from './toolmatcher';\n\nimport { Sentence as Sentence} from 'mgnlq_er';\n\nimport { Word as Word}  from 'mgnlq_er';\n\nimport * as Algol from './algol';\n\nimport {Model as Model}  from 'mgnlq_model';\n\n\n\n/*\nexport function cmpByResultThenRanking(a: IMatch.IWhatIsAnswer, b: IMatch.IWhatIsAnswer) {\n  var cmp = a.result.localeCompare(b.result);\n  if (cmp) {\n    return cmp;\n  }\n  return -(a._ranking - b._ranking);\n}\n*/\n\nexport function localeCompareArrays(aaresult: string[], bbresult: string[]): number {\n  var cmp = 0;\n  var blen = bbresult.length;\n  aaresult.every(function (a, index) {\n    if (blen <= index) {\n      cmp = -1;\n      return false;\n    }\n    cmp = a.localeCompare(bbresult[index]);\n    if (cmp) {\n      return false;\n    }\n    return true;\n  });\n  if (cmp) {\n    return cmp;\n  }\n  if (blen > aaresult.length) {\n    cmp = +1;\n    return cmp;\n  }\n  return 0;\n}\n\n\nexport function localeCompareRecordArrays(aaresult: MongoQ.IResultRecord[], bbresult: MongoQ.IResultRecord[]):  number {\n  var cmp = 0;\n  var blen = bbresult.length;\n  aaresult.every(function (a, index) {\n    if (blen <= index) {\n      cmp = -1;\n      return false;\n    }\n    cmp = localeCompareRecord(a,bbresult[index]);\n    if (cmp) {\n      return false;\n    }\n    return true;\n  });\n  if (cmp) {\n    return cmp;\n  }\n  if (blen > aaresult.length) {\n    cmp = +1;\n    return cmp;\n  }\n  return 0;\n}\n\n\nexport function localeCompareRecord(aaresult: MongoQ.IResultRecord, bbresult: MongoQ.IResultRecord): number {\n  var cmp = 0;\n  var blen = bbresult.length;\n  var keys = Object.keys(aaresult).sort();\n  keys.every(function (keya, index)  : boolean{\n   var a = aaresult[keya];\n    if (blen <= index) {\n      cmp = -1;\n      return false;\n    }\n    var b = bbresult[keya];\n    var ta = typeof a;\n    var tb = typeof b;\n    if(ta !== tb ) {\n      cmp = ta.localeCompare(tb);\n      return false;\n    }\n    if(typeof ta === 'number') {\n      cmp = safeDelta(a as number,b as number);\n    } else {\n      cmp = (a as string).localeCompare( (b as string));\n    }\n    if (cmp) {\n      return false;\n    }\n    return true;\n  });\n  if (cmp) {\n    return cmp;\n  }\n  if (blen > aaresult.length) {\n    cmp = +1;\n    return cmp;\n  }\n  return 0;\n}\n\nexport function safeEqual(a : number, b : number) : boolean {\n  var delta = a - b ;\n  if(Math.abs(delta) < Algol.RANKING_EPSILON) {\n    return true;\n  }\n  return false;\n}\n\nexport function safeDelta(a : number, b : number) : number {\n  var delta = a - b ;\n  if(Math.abs(delta) < Algol.RANKING_EPSILON) {\n    return 0;\n  }\n  return delta;\n}\n\nexport function cmpByResultThenRankingTupel(aa: IMatch.IWhatIsTupelAnswer, bb: IMatch.IWhatIsTupelAnswer) {\n  var cmp = localeCompareRecordArrays(aa.results, bb.results);\n  if (cmp) {\n    return cmp;\n  }\n  return 0; // -safeDelta(aa._ranking,bb._ranking);\n}\n\n\nexport function cmpRecords(a: IMatch.IRecord, b: IMatch.IRecord) : number {\n  // are records different?\n  var keys = Object.keys(a).concat(Object.keys(b)).sort();\n  var res = keys.reduce(function (prev, sKey) {\n    if (prev) {\n      return prev;\n    }\n    if (b[sKey] !== a[sKey]) {\n      if (!b[sKey]) {\n        return -1;\n      }\n      if (!a[sKey]) {\n        return +1;\n      }\n      return a[sKey].localeCompare(b[sKey]);\n    }\n    return 0;\n  }, 0);\n  return res;\n}\n\n/*\nexport function cmpByRanking(a: IMatch.IWhatIsAnswer, b: IMatch.IWhatIsAnswer) : number {\n  var cmp = - safeDelta(a._ranking, b._ranking) as number;\n  if (cmp) {\n    return cmp;\n  }\n  cmp = a.result.localeCompare(b.result);\n  if (cmp) {\n    return cmp;\n  }\n\n  return cmpRecords(a.record,b.record);\n}\n*/\n\n/*\nexport function cmpByRankingTupel(a: IMatch.IWhatIsTupelAnswer, b: IMatch.IWhatIsTupelAnswer) : number {\n  var cmp = 0; // - safeDelta(a._ranking, b._ranking);\n  if (cmp) {\n    return cmp;\n  }\n  cmp = localeCompareRecordArrays(a.results, b.results);\n  if (cmp) {\n    return cmp;\n  }\n  return 0; //cmpRecords(a.record,b.record);\n}\n*/\n\nexport function dumpNiceTupel(answer: IMatch.IWhatIsTupelAnswer) {\n  var result = {\n    s: \"\",\n    push: function (s) { this.s = this.s + s; }\n  };\n  var s =\n    `**Result for categories: ${answer.columns.join(\";\")} is ${answer.results}\n rank: ${1 /*answer._ranking*/}\n`;\n  result.push(s);\n  answer.results.forEach(function (queryresult,index) {\n  answer.columns.forEach(function (sRequires, index) {\n    if (sRequires.charAt(0) !== '_') {\n      result.push(`record: ${sRequires} -> ${queryresult[sRequires]}`);\n    }\n    result.push('\\n');\n  });\n});\n\n  var oSentence = answer.aux.sentence || [];\n  oSentence.forEach(function (oWord, index) {\n    var sWord = `[${index}] : ${oWord.category} \"${oWord.string}\" => \"${oWord.matchedString}\"`\n    result.push(sWord + \"\\n\");\n  })\n  result.push(\".\\n\");\n  return result.s;\n}\n\n/*\nexport function filterDistinctResultAndSortTupel(res: IMatch.IProcessedWhatIsTupelAnswers): IMatch.IProcessedWhatIsTupelAnswers {\n  var result = res.tupelanswers.filter(function (iRes, index) {\n    if (debuglog.enabled) {\n      debuglog(' retain tupel ' + index + ' ' + JSON.stringify(iRes));\n    }\n    if (_.isEqual(iRes.result, res.tupelanswers[index - 1] && res.tupelanswers[index - 1].result)) {\n      debuglog('skip');\n      return false;\n    }\n    return true;\n  });\n  result.sort(cmpByRankingTupel);\n  return (Object as any).assign(res, { tupelanswers: result });\n}\n*/\n\n/*\nexport function filterOnlyTopRanked(results: Array<IMatch.IWhatIsAnswer>): Array<IMatch.IWhatIsAnswer> {\n  var res = results.filter(function (result) {\n    if (safeEqual(result._ranking, results[0]._ranking)) {\n      return true;\n    }\n    if (result._ranking >= results[0]._ranking) {\n      throw new Error(\"List to filter must be ordered\");\n    }\n    return false;\n  });\n  return res;\n}\n\nexport function filterOnlyTopRankedTupel(results: Array<IMatch.IWhatIsTupelAnswer>): Array<IMatch.IWhatIsTupelAnswer> {\n  var res = results.filter(function (result) {\n    if ( safeEqual(result._ranking, results[0]._ranking)) {\n      return true;\n    }\n    if (result._ranking >= results[0]._ranking) {\n      throw new Error(\"List to filter must be ordered\");\n    }\n    return false;\n  });\n  return res;\n}\n*/\n\n/**\n * A ranking which is purely based on the numbers of matched entities,\n * disregarding exactness of match\n */\n/*\nexport function calcRankingSimple(matched: number,\n  mismatched: number, nouse: number,\n  relevantCount: number): number {\n  // 2 : 0\n  // 1 : 0\n  var factor = matched * Math.pow(1.5, matched) * Math.pow(1.5, matched);\n  var factor2 = Math.pow(0.4, mismatched);\n  var factor3 = Math.pow(0.4, nouse);\n  return Math.pow(factor2 * factor * factor3, 1 / (mismatched + matched + nouse));\n}\n*/\n/*\nexport function calcRankingHavingCategory(matched: { [key: string]: IMatch.IWord },\n  hasCategory: { [key: string]: number },\n  mismatched: { [key: string]: IMatch.IWord }, relevantCount: number, hasDomain : number): number {\n\n\n  var lenMatched = Object.keys(matched).length;\n  var factor = Match.calcRankingProduct(matched);\n  factor *= Math.pow(1.5, lenMatched);\n  if(hasDomain) {\n    factor *= 1.5;\n  }\n  var lenHasCategory = Object.keys(hasCategory).length;\n  var factorH = Math.pow(1.1, lenHasCategory);\n\n  var lenMisMatched = Object.keys(mismatched).length;\n  var factor2 = Match.calcRankingProduct(mismatched);\n  factor2 *= Math.pow(0.4, lenMisMatched);\n  var divisor =  (lenMisMatched + lenHasCategory + lenMatched);\n  divisor = divisor ? divisor : 1;\n  return Math.pow(factor2 * factorH * factor, 1 / (divisor));\n}\n*/\n\n/**\n * list all top level rankings\n */\n/*\nexport function matchRecordsHavingContext(\n  pSentences: IMatch.IProcessedSentences, category: string, records: Array<IMatch.IRecord>,\n  categorySet: { [key: string]: boolean })\n  : IMatch.IProcessedWhatIsAnswers {\n\n  //debuglog(JSON.stringify(records, undefined, 2));\n  var relevantRecords = records.filter(function (record: IMatch.IRecord) {\n    return (record[category] !== undefined) && (record[category] !== null);\n  });\n  var res = [];\n  debuglog(\"MatchRecordsHavingContext : relevant records nr:\" + relevantRecords.length);\n  debuglog(debuglog.enabled ? (\"sentences are : \" + JSON.stringify(pSentences, undefined, 2)) : \"-\");\n  debuglog(debuglog.enabled ? (\"category \" + category + \" and categoryset is: \" + JSON.stringify(categorySet, undefined, 2)) : \"-\");\n  if (process.env.ABOT_FAST && categorySet) {\n    // we are only interested in categories present in records for domains which contain the category\n    // var categoryset = Model.calculateRelevantRecordCategories(theModel,category);\n    //knowing the target\n    perflog(\"got categoryset with \" + Object.keys(categorySet).length);\n    var fl = 0;\n    var lf = 0;\n    var aSimplifiedSentences = pSentences.sentences.map(function (oSentence) {\n      var fWords = oSentence.filter(function (oWord) {\n        return !Word.Word.isFiller(oWord);\n      });\n      var rWords = oSentence.filter(function (oWord) {\n        return !!categorySet[oWord.category] || Word.Word.isCategory(oWord);\n      });\n      fl = fl + oSentence.length;\n      lf = lf + rWords.length;\n      return {\n        oSentence: oSentence,\n        cntRelevantWords: rWords.length, // not a filler  // to be compatible it would be fWords\n        rWords: rWords\n      };\n    });\n    Object.freeze(aSimplifiedSentences);\n    debuglog(\"post simplify (r=\" + relevantRecords.length + \" s=\" + pSentences.sentences.length + \" fl \" + fl + \"->\" + lf + \")\");\n    perflog(\"post simplify (r=\" + relevantRecords.length + \" s=\" + pSentences.sentences.length + \" fl \" + fl + \"->\" + lf + \")\");\n    relevantRecords.forEach(function (record) {\n      // count matches in record which are *not* the category\n      aSimplifiedSentences.forEach(function (aSentence) {\n        var hasCategory = {};\n        var mismatched = {};\n        var matched = {};\n        var cntRelevantWords = aSentence.cntRelevantWords;\n        aSentence.rWords.forEach(function (oWord) {\n          if (oWord.category && (record[oWord.category] !== undefined)) {\n            if (oWord.matchedString === record[oWord.category]) {\n              matched[oWord.category] = oWord;\n            }\n            else {\n              mismatched[oWord.category] = oWord;\n            }\n          }\n          else if (Word.Word.isCategory(oWord) && record[oWord.matchedString]) {\n            hasCategory[oWord.matchedString] = 1;\n          }\n        }\n        );\n        if ((Object.keys(matched).length + Object.keys(hasCategory).length) > Object.keys(mismatched).length) {\n          res.push({\n            sentence: aSentence.oSentence,\n            record: record,\n            category: category,\n            result: record[category],\n            _ranking: calcRankingHavingCategory(matched, hasCategory, mismatched, cntRelevantWords)\n          });\n        }\n      })\n    });\n    debuglog(\"here in weird\");\n  } else {\n    relevantRecords.forEach(function (record) {\n      // count matches in record which are *not* the category\n      pSentences.sentences.forEach(function (aSentence) {\n        var hasCategory = {};\n        var mismatched = {};\n        var matched = {};\n        var cntRelevantWords = 0;\n        aSentence.forEach(function (oWord) {\n          if (!Word.Word.isFiller(oWord)) {\n            cntRelevantWords = cntRelevantWords + 1;\n            if (oWord.category && (record[oWord.category] !== undefined)) {\n              if (oWord.matchedString === record[oWord.category]) {\n                matched[oWord.category] = oWord;\n              }\n              else {\n                mismatched[oWord.category] = oWord;\n              }\n            }\n            else if (Word.Word.isCategory(oWord) && record[oWord.matchedString]) {\n              hasCategory[oWord.matchedString] = 1;\n            }\n          }\n        });\n        if ((Object.keys(matched).length + Object.keys(hasCategory).length) > Object.keys(mismatched).length) {\n          res.push({\n            sentence: aSentence,\n            record: record,\n            category: category,\n            result: record[category],\n            _ranking: calcRankingHavingCategory(matched, hasCategory, mismatched, cntRelevantWords)\n          });\n        }\n      })\n    });\n  }\n  res.sort(cmpByResultThenRanking);\n  debuglog(\" after sort\" + res.length);\n  var result = Object.assign({}, pSentences, { answers: res });\n  return filterRetainTopRankedResult(result);\n}\n*/\n\n/*\nexport function matchRecords(aSentences: IMatch.IProcessedSentences, category: string, records: Array<IMatch.IRecord>)\n  : IMatch.IProcessedWhatIsAnswers {\n  // if (debuglog.enabled) {\n  //   debuglog(JSON.stringify(records, undefined, 2));\n  // }\n  var relevantRecords = records.filter(function (record: IMatch.IRecord) {\n    return (record[category] !== undefined) && (record[category] !== null);\n  });\n  var res = [];\n  debuglog(\"relevant records nr:\" + relevantRecords.length);\n  relevantRecords.forEach(function (record) {\n    aSentences.sentences.forEach(function (aSentence) {\n      // count matches in record which are *not* the category\n      var mismatched = {}\n      var matched = {};\n      var cntRelevantWords = 0;\n      aSentence.forEach(function (oWord) {\n        if (!Word.Word.isFiller(oWord)) {\n          cntRelevantWords = cntRelevantWords + 1;\n          if (oWord.category && (record[oWord.category] !== undefined)) {\n            if (oWord.matchedString === record[oWord.category]) {\n              matched[oWord.category] = oWord;\n            } else {\n              mismatched[oWord.category] = oWord;\n            }\n          }\n        }\n      });\n      if (Object.keys(matched).length > Object.keys(mismatched).length) {\n        res.push({\n          sentence: aSentence,\n          record: record,\n          category: category,\n          result: record[category],\n          _ranking: calcRanking(matched, mismatched, cntRelevantWords)\n        });\n      }\n    })\n  });\n  res.sort(cmpByResultThenRanking);\n  var result = Object.assign({}, aSentences, { answers: res });\n  return filterRetainTopRankedResult(result);\n}\n*/\n/*\nfunction makeSimplifiedSentencesCategorySet(aSentences: IMatch.IProcessedSentences,\n  categorySet: { [key: string]: boolean }, track: { fl: number, lf: number }\n): {\n  domains: string[],\n  oSentence: IMatch.ISentence,\n  cntRelevantWords: number,\n  rWords: IMatch.IWord[]\n}[] {\n  return aSentences.sentences.map(function (oSentence) {\n    var aDomains = [] as string[];\n    var rWords = oSentence.filter(function (oWord) {\n      if (oWord.category === \"domain\") {\n        aDomains.push(oWord.matchedString);\n        return false;\n      }\n      if (oWord.category === \"meta\") {\n        // e.g. domain XXX\n        return false;\n      }\n      return !!categorySet[oWord.category];\n    });\n    track.fl += oSentence.length;\n    track.lf += rWords.length;\n    return {\n      domains: aDomains,\n      oSentence: oSentence,\n      cntRelevantWords: rWords.length,\n      rWords: rWords\n    };\n  });\n}\n*/\n/*\nfunction makeSimplifiedSentencesCategorySet2(aSentences: IMatch.IProcessedSentences,\n  categorySet: { [key: string]: boolean }, track: { fl: number, lf: number }\n): {\n  domains: string[],\n  oSentence: IMatch.ISentence,\n  cntRelevantWords: number,\n  rWords: IMatch.IWord[]\n}[] {\n  return aSentences.sentences.map(function (oSentence) {\n    var aDomains = [] as string[];\n    var rWords = oSentence.filter(function (oWord) {\n      if (oWord.category === \"domain\") {\n        aDomains.push(oWord.matchedString);\n        return false;\n      }\n      if (oWord.category === \"meta\") {\n        // e.g. domain XXX\n        return false;\n      }\n      if(oWord.category === \"category\") {\n        if(categorySet[oWord.matchedString]) {\n          return true;\n        }\n      }\n      return !!categorySet[oWord.category];\n    });\n    track.fl += oSentence.length;\n    track.lf += rWords.length;\n    return {\n      domains: aDomains,\n      oSentence: oSentence,\n      cntRelevantWords: rWords.length,\n      rWords: rWords\n    };\n  });\n}\n*/\n\n/*\nfunction makeSimplifiedSentences(aSentences : IMatch.IProcessedSentences,  track: { fl: number, lf: number }): {\n  domains: string[],\n  oSentence: IMatch.ISentence,\n  cntRelevantWords: number,\n  rWords: IMatch.IWord[]\n}[] {\n  return aSentences.sentences.map(function (oSentence) {\n    var domains = [] as string[];\n    var rWords = oSentence.filter(function (oWord) {\n      if (oWord.category === \"domain\") {\n        domains.push(oWord.matchedString);\n        return false;\n      }\n      if (oWord.category === \"meta\") {\n        // e.g. domain XXX\n        return false;\n      }\n      return !Word.Word.isFiller(oWord);\n    });\n    track.fl += oSentence.length;\n    track.lf += rWords.length;\n    return {\n      oSentence: oSentence,\n      domains: domains,\n      cntRelevantWords: rWords.length,\n      rWords: rWords\n    };\n  });\n}\n*/\n\nfunction classifyWordWithTargetCategory(word: string, targetcategory: string, rules: IMatch.SplitRules,\n  wholesentence: string): string {\n  //console.log(\"classify \" + word + \" \"  + targetcategory);\n  var cats = InputFilter.categorizeAWord(word, rules, wholesentence, {});\n  // TODO qualify\n  cats = cats.filter(function (cat) {\n    return cat.category === targetcategory;\n  })\n  //debuglog(JSON.stringify(cats));\n  if (cats.length) {\n    return cats[0].matchedString;\n  }\n}\n\n\nexport function analyzeCategory(categoryword: string, rules: IMatch.SplitRules, wholesentence: string): string {\n  return classifyWordWithTargetCategory(categoryword, 'category', rules, wholesentence);\n}\n\nexport function splitAtCommaAnd(str: string): string[] {\n  var r = str.split(/(\\band\\b)|[,]/);\n  r = r.filter(function (o, index) {\n    if (index % 2 > 0) {\n      return false;\n    }\n    return true;\n  });\n  var rtrimmed = r.map(function (o) {\n    return new String(o).trim();\n  });\n  return rtrimmed;\n}\n/**\n * A simple implementation, splitting at and and ,\n */\nexport function analyzeCategoryMultOnlyAndComma(categorylist: string, rules: IMatch.SplitRules, wholesentence: string): string[] {\n  var rtrimmed = splitAtCommaAnd(categorylist);\n  var rcat = rtrimmed.map(function (o) {\n    return analyzeCategory(o, rules, wholesentence);\n  });\n  if (rcat.indexOf(undefined) >= 0) {\n    throw new Error('\"' + rtrimmed[rcat.indexOf(undefined)] + '\" is not a category!');\n  }\n  return rcat;\n}\n\n\n\nexport function filterAcceptingOnly(res: IMatch.ICategorizedString[][], categories: string[]):\n  IMatch.ICategorizedString[][] {\n  return res.filter(function (aSentence, iIndex) {\n    return aSentence.every(function (oWord) {\n      return categories.indexOf(oWord.category) >= 0;\n    });\n  })\n}\n\n\n\n\nexport function processString(query: string, rules: IMatch.SplitRules\n): IMatch.IProcessedSentences {\n\n//  if (!process.env.ABOT_OLDMATCH) {\n    return ErBase.processString(query, rules, rules.wordCache);\n//  }\n/*\n  var matched = InputFilter.analyzeString(query, rules, sWords);\n  if (debuglog.enabled) {\n    debuglog(\"After matched \" + JSON.stringify(matched));\n  }\n  var aSentences = InputFilter.expandMatchArr(matched);\n  if (debuglog.enabled) {\n    debuglog(\"after expand\" + aSentences.map(function (oSentence) {\n      return Sentence.rankingProduct(oSentence) + \":\" + JSON.stringify(oSentence);\n    }).join(\"\\n\"));\n  }\n  var aSentencesReinforced = InputFilter.reinForce(aSentences);\n  if (debuglog.enabled) {\n    debuglog(\"after reinforce\" + aSentencesReinforced.map(function (oSentence) {\n      return Sentence.rankingProduct(oSentence) + \":\" + JSON.stringify(oSentence);\n    }).join(\"\\n\"));\n  }\n  return {\n    errors: [],\n    sentences: aSentencesReinforced\n  } as IMatch.IProcessedSentences;\n*/\n}\n\nexport function analyzeContextString(contextQueryString: string, rules: IMatch.SplitRules):\n  IMatch.IProcessedSentences {\n\n  var aSentencesReinforced = processString(contextQueryString, rules)\n  // we limit analysis to n sentences\n  aSentencesReinforced.sentences = aSentencesReinforced.sentences.slice(0, Algol.Cutoff_Sentences);\n  if (debuglog.enabled) {\n    debuglog(\"after reinforce and cutoff\" + aSentencesReinforced.sentences.length + \"\\n\" + aSentencesReinforced.sentences.map(function (oSentence) {\n      return Sentence.rankingProduct(oSentence) + \":\" + JSON.stringify(oSentence);\n    }).join(\"\\n\"));\n  }\n  return aSentencesReinforced;\n}\n\n/*\nexport function cmpByNrCategoriesAndSameDomain(a: IMatch.ISentence, b: IMatch.ISentence): number {\n  //console.log(\"compare a\" + a + \" cntb \" + b);\n  var cnta = Sentence.getDistinctCategoriesInSentence(a).length;\n  var cntb = Sentence.getDistinctCategoriesInSentence(b).length;\n  / *\n    var cnta = a.reduce(function(prev, oWord) {\n      return prev + ((oWord.category === \"category\")? 1 : 0);\n    },0);\n    var cntb = b.reduce(function(prev, oWord) {\n      return prev + ((oWord.category === \"category\")? 1 : 0);\n    },0);\n   // console.log(\"cnt a\" + cnta + \" cntb \" + cntb);\n   * /\n  return cntb - cnta;\n}*/\n\nexport function analyzeCategoryMult(categorylist: string, rules: IMatch.SplitRules, wholesentence: string, gWords:\n  { [key: string]: IMatch.ICategorizedString[] }): string[] {\n\n  var res = analyzeContextString(categorylist, rules);\n  //  debuglog(\"resulting category sentences\", JSON.stringify(res));\n  var res2 = filterAcceptingOnly(res.sentences, [\"category\", \"filler\"]);\n  //  console.log(\"here res2\" + JSON.stringify(res2) );\n  //  console.log(\"here undefined ! + \" + res2.filter(o => !o).length);\n  res2.sort(Sentence.cmpRankingProduct);\n  debuglog(\"resulting category sentences: \\n\", debuglog.enabled ? (Sentence.dumpNiceArr(res2.slice(0, 3), Sentence.rankingProduct)) : '-');\n  // TODO:   res2 = filterAcceptingOnlySameDomain(res2);\n  //debuglog(\"resulting category sentences\", JSON.stringify(res2, undefined, 2));\n  // expect only categories\n  // we could rank now by common domains , but for now we only take the first one\n  if (!res2.length) {\n    return undefined;\n  }\n  //res.sort(cmpByNrCategoriesAndSameDomain);\n  var rescat = Sentence.getDistinctCategoriesInSentence(res2[0]);\n  return rescat;\n  // \"\" return res[0].filter()\n  // return classifyWordWithTargetCategory(categorylist, 'category', rules, wholesentence);\n}\n\n/*\nexport function analyzeOperator(opword: string, rules: IMatch.SplitRules, wholesentence: string): string {\n  return classifyWordWithTargetCategory(opword, 'operator', rules, wholesentence);\n}\n*/\n\n\n// const result = WhatIs.resolveCategory(cat, a1.entity,\n//   theModel.mRules, theModel.tools, theModel.records);\n\nexport function isIndiscriminateResultTupel(results: Array<IMatch.IWhatIsTupelAnswer>): string {\n  var cnt = results.reduce(function (prev, result) {\n    if (safeEqual(1, 1)) { // result._ranking,results[0]._ranking)) {\n      return prev + 1;\n    }\n  }, 0);\n  if (cnt > 1) {\n    // search for a discriminating category value\n    var discriminating = []; /*Object.keys(results[0].record).reduce(function (prev, category) {\n      if ((category.charAt(0) !== '_' && results[0].categories.indexOf(category) < 0)\n        && (results[0].record[category] !== results[1].record[category])) {\n        prev.push(category);\n      }\n      return prev;\n    }, []); */\n    if (discriminating.length) {\n      return \"Many comparable results, perhaps you want to specify a discriminating \" + discriminating.join(',') + ' or use \"list all ...\"';\n    }\n    return 'Your question does not have a specific answer';\n  }\n  return undefined;\n}\n"],"sourceRoot":"ABC"}