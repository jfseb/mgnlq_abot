{"version":3,"sources":["/projects/nodejs/botbuilder/mgnlq_abot/src/../src/utils/dialoglogger.ts"],"names":[],"mappings":"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","file":"dialoglogger.js","sourcesContent":["/**\n * a logger for dialog conversations\n */\n//declare module pg {};\n\nimport * as builder from 'botbuilder';\nimport * as pg from 'pg';\nimport * as debug from 'debug';\nimport * as process from 'process';\n\n\nexport var sqlActive = !!(process.env.ABOT_LOGDB);\n\nconst debuglog = debug('dialoglogger');\n\ninterface ILogger {\n  name: string,\n  dburl: string,\n  logIt?: (a : IAnswer, callback : (err : any, res? : any) => void) => void,\n  pg : any\n};\n\nexport interface ILogEntry {\n  botid : string, /* 10 */\n  userid : string,\n  message : string,\n  response : string,\n  action : string,\n  intent : string,\n  conversationid : string,\n  /**\n   * an result\n   **/\n  meta : any,\n  delta: number\n};\n\nexport interface IAnswer {\n  session : builder.Session,\n  intent : string,\n  response : string,\n  action? : string,\n  result? : any,\n}\n\nconst columns = [\"botid\",\"userid\", \"message\", \"response\", \"action\", \"intent\", \"conversationid\", \"meta\", \"delta\"];\n// 0 indicates do not process /truncate, e.g. non string type\nconst columnLengths = [10, 40, 1024, 1024, 512, 20, 40, 0,0 ];\n\n\nexport function assureColumnLengthNotExceeded(obj : ILogEntry) : ILogEntry {\n  columns.forEach(function(sCol,iIndex) {\n    if(columnLengths[iIndex] && typeof obj[sCol] !==  \"string\") {\n      debuglog(\"Unexpected non-string value \" + JSON.stringify(obj[sCol]));\n      obj[sCol] = \"\"+ obj[sCol];\n    }\n    if(obj[sCol] && columnLengths[iIndex] && obj[sCol].length > columnLengths[iIndex]) {\n      obj[sCol] = obj[sCol].substring(0,columnLengths[iIndex]);\n    }\n  });\n  return obj;\n}\n\nexport function logAnswer(answer: IAnswer, callback : (err: any, res?: any) => void , ForceSqlActive? : boolean) {\n  \"use strict\";\n  callback = callback || (function() {});\n  var session = answer.session;\n  var sqlIsActive = ForceSqlActive || sqlActive;\n  var pg = this.pg;\n  debuglog(\"here user id of message session.message.address \" +\n  JSON.stringify(session.message.address.user));\n  var oLogEntry : ILogEntry = {\n    botid : (session.message && session.message.address && session.message.address.bot && session.message.address.bot.id ) || this.name,\n    userid: session.message.address\n    && session.message.address.user\n    && session.message.address.user.id || \"\",\n    message: session.message.text,\n    response : answer.response,\n    action : answer.action,\n\n    intent: answer.intent,\n\n    conversationid: session.message.address\n    && session.message.address.conversation\n    && session.message.address.conversation.id || \"\",\n\n    meta : answer.result || {},\n\n    delta : Date.now() - Date.parse(session.message.timestamp),\n  };\n\n  oLogEntry = assureColumnLengthNotExceeded(oLogEntry);\n  debuglog(\"sqlIsActive\" + sqlIsActive);\n  if (!sqlIsActive) {\n    return;\n  }\n  pg.connect(this.dburl, (err, client : pg.Client, pgDone) => {\n      if (err) {\n        // failed to acquire connection\n        //logger.emit('error', err);\n        debuglog('Error connecting to db' + err);\n        callback(err);\n      } else {\n        var query =`INSERT INTO logconv (` + columns.join(\",\") + \") \" +\n        //   (convid, sessionid, user, message, response, meta) ` +\n        \"VALUES ( \"  +\n        // $1, $2, ...\n         columns.map(function(o,iIndex) { return \"$\" + (iIndex+1); }).join(\", \") + \")\";\n\n        var values = columns.map(function(sCol) {\n             return oLogEntry[sCol];\n           });\n           //  [level, msg, meta instanceof Array ? JSON.stringify(meta) : meta],\n\n        client.query(query,values,\n\n                     (err, result) => {\n            pgDone();\n            if (err) {\n             // logger.emit('error', err);\n             debuglog('Error inserting record into db ' + err + '\\n' +\n                values.join(\"\\n\"));\n              callback(err);\n            } else {\n            //  logger.emit('logged');\n              callback(null, true);\n            }\n        });\n      }\n    });\n  }\n\nvar loggers = {} as { [key: string]: ILogger };\n\nexport function logger(name: string, dburl : string, pg: any) : (a: IAnswer, callback?: (err:any, res? :any) => void) => void  {\n  if (!dburl) {\n    throw new Error('need database url');\n  }\n  if (typeof name !== \"string\" || !/^[A-Za-z][A-Za-z0-9_]+$/.exec(name)) {\n    throw new Error('Logger name must be at least two alphanumeric characters')\n  }\n  if (!loggers[name]) {\n    var alogger = {\n      name: name,\n      dburl: dburl,\n      pg : pg\n    } as ILogger;\n    alogger.logIt = logAnswer.bind(alogger);\n    loggers[name] = alogger;\n  }\n  if (loggers[name].dburl !== dburl) {\n    throw new Error('Flags mismatch in logger' + name);\n  }\n  return loggers[name].logIt;\n}"],"sourceRoot":"ABC"}