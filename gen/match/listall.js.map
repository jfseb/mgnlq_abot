{"version":3,"sources":["/projects/nodejs/botbuilder/fdevstart/src/../src/match/listall.ts"],"names":[],"mappings":"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","file":"match/listall.js","sourcesContent":["/**\n *\n * @module jfseb.fdevstart.analyze\n * @file analyze.ts\n * @copyright (c) 2016 Gerd Forstmann\n */\n\nimport * as Algol from './algol';\nimport * as debug from 'debugf';\n\nconst debuglog = debug('listall');\nimport * as logger from '../utils/logger';\nvar logPerf = logger.perf(\"perflistall\");\nvar perflog = debug('perf');\nimport * as _ from 'lodash';\n//const perflog = logger.perf(\"perflistall\");\n\nimport * as Utils from 'abot_utils';\nimport * as IMatch from './ifmatch';\nimport * as Match from './match';\n\nimport * as Toolmatcher from './toolmatcher';\nimport { BreakDown } from 'mgnlq_model';\nimport { Sentence as Sentence } from 'mgnlq_er';\nimport { Word as Word } from 'mgnlq_er';\nimport * as Operator from './operator';\nimport * as WhatIs from './whatis';\nimport { ErError as ErError } from 'mgnlq_er';\nimport { Model } from 'mgnlq_model';\nimport * as MongoQueries from './mongoqueries';\n\n\n\nvar sWords = {};\n\nexport function matchRecordHavingCategory(category: string, records: Array<IMatch.IRecord>)\n  : Array<IMatch.IRecord> {\n  debuglog(debuglog.enabled ? JSON.stringify(records, undefined, 2) : \"-\");\n  var relevantRecords = records.filter(function (record: IMatch.IRecord) {\n    return (record[category] !== undefined) && (record[category] !== null);\n  });\n  var res = [];\n  debuglog(\"relevant records nr:\" + relevantRecords.length);\n  return relevantRecords;\n}\n\n\nexport function analyzeContextString(contextQueryString: string, rules: IMatch.SplitRules) {\n  return WhatIs.analyzeContextString(contextQueryString, rules);\n}\n\n// const result = WhatIs.resolveCategory(cat, a1.entity,\n//   theModel.mRules, theModel.tools, theModel.records);\n\n\nexport function listAllWithContext(category: string, contextQueryString: string,\n  theModel: IMatch.IModels, domainCategoryFilter?: IMatch.IDomainCategoryFilter): Promise<IMatch.IProcessedWhatIsAnswers> {\n  return listAllTupelWithContext([category], contextQueryString, theModel, domainCategoryFilter).then(\n    (res) => {\n      var answers = res.tupelanswers.map(function (o): IMatch.IWhatIsAnswer {\n        return {\n          sentence: o.sentence,\n          record: o.record,\n          category: o.categories[0],\n          result: o.result[0],\n          _ranking: o._ranking\n        };\n      }\n      );\n      return {\n        sentences: res.sentences,\n        errors: res.errors,\n        tokens: res.tokens,\n        answers: answers\n      };\n    })\n}\n\n\n/*\nexport function listAllWithCategory(category: string, theModel: IMatch.IModels): Array<IMatch.IRecord> {\n  var matchedAnswers = matchRecordHavingCategory(category, theModel); //aTool: Array<IMatch.ITool>): any / * objectstream* / {\n  debuglog(\" listAllWithCategory:\" + JSON.stringify(matchedAnswers, undefined, 2));\n  return matchedAnswers;\n}\n*/\n\nexport function listAllTupelWithContext(categories: string[], contextQueryString: string,\n  theModel: IMatch.IModels, domainCategoryFilter?: IMatch.IDomainCategoryFilter): Promise<IMatch.IProcessedWhatIsTupelAnswers> {\n\n  var query = categories.join(\" \") + \" with \" + contextQueryString;\n  if (!contextQueryString) {\n    throw new Error('assumed contextQueryString passed');\n  }\n  return MongoQueries.listAll(query, theModel);\n  /*\n\n    if (contextQueryString.length === 0) {\n      return {\n        tupelanswers : [],\n        errors : [ErError.makeError_EMPTY_INPUT()] ,\n        tokens :[],\n      };\n    } else {\n\n      logPerf('listAllWithContext');\n      perflog(\"totalListAllWithContext\");\n      var aSentencesReinforced = analyzeContextString(contextQueryString, aRules);\n      perflog(\"LATWC matching records (s=\" + aSentencesReinforced.sentences.length + \")...\");\n      var matchedAnswers = WhatIs.matchRecordsQuickMultipleCategories(aSentencesReinforced, categories, records, domainCategoryFilter); //aTool: Array<IMatch.ITool>): any / * objectstream* / {\n      if(debuglog.enabled){\n        debuglog(\" matched Answers\" + JSON.stringify(matchedAnswers, undefined, 2));\n      }\n      perflog(\"filtering topRanked (a=\" + matchedAnswers.tupelanswers.length + \")...\");\n      var matchedFiltered = WhatIs.filterOnlyTopRankedTupel(matchedAnswers.tupelanswers);\n      if (debuglog.enabled) {\n        debuglog(\"LATWC matched top-ranked Answers\" + JSON.stringify(matchedFiltered, undefined, 2));\n      }\n      perflog(\"totalListAllWithContext (a=\" + matchedFiltered.length + \")\");\n      logPerf('listAllWithContext');\n      return {\n        tupelanswers : matchedFiltered, // ??? Answers;\n        errors : aSentencesReinforced.errors,\n        tokens: aSentencesReinforced.tokens\n      }\n    }\n    */\n}\n\n/*\nexport function filterStringListByOp(operator: IMatch.IOperator, fragment: string, srcarr: string[]): string[] {\n  var fragmentLC = BreakDown.trimQuotedSpaced(fragment.toLowerCase());\n  return srcarr.filter(function (str) {\n    return Operator.matches(operator, fragmentLC, str.toLowerCase());\n  }).sort();\n}\n*/\n\nfunction compareCaseInsensitive(a: string, b: string) {\n  var r = a.toLowerCase().localeCompare(b.toLowerCase());\n  if (r) {\n    return r;\n  }\n  return -a.localeCompare(b);\n}\n\n/**\n * Sort string list case insensitive, then remove duplicates retaining\n * \"largest\" match\n */\nexport function removeCaseDuplicates(arr: string[]): string[] {\n  arr.sort(compareCaseInsensitive);\n  debuglog('sorted arr' + JSON.stringify(arr));\n  return arr.filter(function (s, index) {\n    return index === 0 || (0 !== arr[index - 1].toLowerCase().localeCompare(s.toLowerCase()));\n  });\n};\n\nexport function getCategoryOpFilterAsDistinctStrings(operator: IMatch.IOperator, fragment: string,\n  category: string, records: Array<IMatch.IRecord>, filterDomain?: string): string[] {\n  var fragmentLC = BreakDown.trimQuoted(fragment.toLowerCase());\n  var res = [];\n  var seen = {};\n  records.forEach(function (record) {\n    if (filterDomain && record['_domain'] !== filterDomain) {\n      return;\n    }\n    if (record[category] && Operator.matches(operator, fragmentLC, record[category].toLowerCase())) {\n      if (!seen[record[category]]) {\n        seen[record[category]] = true;\n        res.push(record[category]);\n      }\n    }\n  });\n  return removeCaseDuplicates(res);\n};\n\nexport function likelyPluralDiff(a: string, pluralOfa: string): boolean {\n  var aLC = BreakDown.trimQuoted(a.toLowerCase()) || \"\";\n  var pluralOfALC = BreakDown.trimQuoted((pluralOfa || \"\").toLowerCase()) || \"\";\n  if (aLC === pluralOfALC) {\n    return true;\n  }\n  if (aLC + 's' === pluralOfALC) {\n    return true;\n  }\n  return false;\n};\n\n\n\n\nexport function joinSortedQuoted(strings: string[]): string {\n  if (strings.length === 0) {\n    return \"\";\n  }\n  return '\"' + strings.sort().join('\"; \"') + '\"';\n}\n\nexport function joinDistinct(category: string, records: Array<IMatch.IRecord>): string {\n  var res = records.reduce(function (prev, oRecord) {\n    prev[oRecord[category]] = 1;\n    return prev;\n  }, {} as any);\n  return joinSortedQuoted(Object.keys(res));\n}\n\nexport function formatDistinctFromWhatIfResult(answers: Array<IMatch.IWhatIsAnswer>): string {\n  return joinSortedQuoted(answers.map(function (oAnswer) {\n    return oAnswer.result;\n  }));\n}\n\nexport function joinResults(results: Array<IMatch.IWhatIsAnswer>): string[] {\n  var res = [];\n  var cnt = results.reduce(function (prev, result) {\n    if (result._ranking === results[0]._ranking) {\n      if (res.indexOf(result.result) < 0) {\n        res.push(result.result);\n      }\n      return prev + 1;\n    }\n  }, 0);\n  return res;\n}\n\n\n/**\n * return undefined if resutls is not only erroneous\n * @param results\n */\nexport function returnErrorTextIfOnlyError(results: IMatch.IProcessedWhatIsTupelAnswers): string {\n  if (results.tupelanswers.length === 0) {\n    debuglog(() => ` no answers: ${JSON.stringify(results, undefined, 2)}`);\n    if (results.errors.length > 0) {\n      if ((results.errors as any).filter(err => (err === false)).length > 0) {\n        debuglog('valid result')\n        return undefined; // at least one query was ok\n      }\n      debuglog(() => ` errors:  ${JSON.stringify(results.errors, undefined, 2)}`);\n      if (results.errors[0]) {\n        return ErError.explainError(results.errors); //[0].text\n      }\n    }\n  }\n  return undefined;\n}\n\nexport function joinResultsTupel(results: Array<IMatch.IWhatIsTupelAnswer>): string[] {\n  var res = [];\n  var cnt = results.reduce(function (prev, result) {\n    if (result._ranking === results[0]._ranking) {\n      var value = Utils.listToQuotedCommaAnd(result.result);\n      if (res.indexOf(value) < 0) {\n        res.push(value);\n      }\n      return prev + 1;\n    }\n  }, 0);\n  return res;\n}\n\nexport function inferDomain(theModel: IMatch.IModels, contextQueryString: string): string {\n  // console.log(\"here the string\" + contextQueryString);\n  //  console.log(\"here the rules\" + JSON.stringify(theModel.mRules));\n  var res = analyzeContextString(contextQueryString, theModel.rules);\n  debuglog(()=>JSON.stringify(res,undefined,2));\n  // run through the string, search for a category\n  if (!res.sentences.length) {\n    return undefined;\n  }\n  var domains = [];\n  //console.log(Sentence.dumpNiceArr(res));\n  // do we have a domain ?\n  res.sentences[0].forEach(function (oWordGroup) {\n    if (oWordGroup.category === \"domain\") {\n      domains.push(oWordGroup.matchedString)\n    }\n  });\n  if (domains.length === 1) {\n    debuglog(\"got a precise domain \" + domains[0]);\n    return domains[0];\n  }\n  if (domains.length > 0) {\n    debuglog(debuglog.enabled ? (\"got more than one domain, confused  \" + domains.join(\"\\n\")) : '-');\n    return undefined;\n    // TODOD\n  }\n  debuglog(\"attempting to determine categories\")\n  // try a category reverse map\n  res.sentences[0].forEach(function (oWordGroup) {\n    if (oWordGroup.category === \"category\") {\n      var sCat = oWordGroup.matchedString;\n      var doms = Model.getDomainsForCategory(theModel, sCat);\n      doms.forEach(function (sDom) {\n        if (domains.indexOf(sDom) < 0) {\n          domains.push(sDom);\n        }\n      });\n    }\n  });\n  if (domains.length === 1) {\n    debuglog(\"got a precise domain \" + domains[0]);\n    return domains[0];\n  }\n  debuglog(debuglog.enabled ? (\"got more than one domain, confused  \" + domains.join(\"\\n\")) : '-');\n  return undefined;\n};"],"sourceRoot":"ABC"}