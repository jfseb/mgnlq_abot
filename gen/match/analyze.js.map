{"version":3,"sources":["/projects/nodejs/botbuilder/fdevstart/src/../src/match/analyze.ts"],"names":[],"mappings":"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","file":"match/analyze.js","sourcesContent":["/**\n *\n * @module jfseb.fdevstart.analyze\n * @file analyze.ts\n * @copyright (c) 2016 Gerd Forstmann\n */\n\n\"use strict\";\n\nimport {InputFilter as InputFilter, Sentence as Sentence} from 'mgnlq_er';\n\nimport * as debug from 'debug';\n\nconst debuglog = debug('analyze');\n\n\n\nimport * as logger from '../utils/logger';\nvar perf = logger.perf('analyze');\n\n\nimport * as Utils from 'abot_utils';\n\nimport * as IMatch from './ifmatch';\n\nimport { ErBase as ErBase}  from 'mgnlq_er';\nimport * as Toolmatcher from './toolmatcher';\n\n\nexport function analyzeAll(sString: string, rules: IMatch.SplitRules, aTools: Array<IMatch.ITool>, words? ) {\n  \"use strict\";\n  if (sString.length === 0) {\n    return [];\n  } else {\n\n    var res = ErBase.processString2(sString, rules, words);\n/*\n    perf('analyzeString');\n //   InputFilter.resetCnt();\n    var matched = InputFilter.analyzeString(sString, rules, words);\n    perf('analyzeString');\n //   InputFilter.dumpCnt();\n    perf('expand');\n    debuglog(\"After matched \" + JSON.stringify(matched));\n    var aSentences = InputFilter.expandMatchArr(matched);\n\n    aSentences.sort(Sentence.cmpRankingProduct);\n    debuglog(\"after expand\" + aSentences.map(function (oSentence) {\n      return Sentence.rankingProduct(oSentence) + \":\" + Sentence.dumpNice(oSentence);\n    }).join(\"\\n\"));\n    if (debuglog.enabled) {\n      debuglog(\" after expand:\" + Sentence.dumpNiceArr(aSentencesReinforced, Sentence.rankingProduct));\n    }\n    perf('expand');\n    var aSentencesReinforced = InputFilter.reinForce(aSentences);\n    //aSentences.map(function(oSentence) { return InputFilter.reinForce(oSentence); });\n    aSentencesReinforced.sort(Sentence.cmpRankingProduct);\n    debuglog(\"after reinforce \\n\" + aSentencesReinforced.map(function (oSentence) {\n      return Sentence.rankingProduct(oSentence) + \":\" + Sentence.dumpNice(oSentence);\n    }).join(\"\\n\"));\n    if (debuglog.enabled) {\n      debuglog(\" after reinforce:\" + Sentence.dumpNiceArr(aSentencesReinforced, Sentence.rankingProduct));\n    }\n    aSentencesReinforced = Sentence.cutoffSentenceAtRatio(aSentencesReinforced)\n  */\n    perf('matchTools');\n    var matchedTools = Toolmatcher.matchTools(res.sentences, aTools); //aTool: Array<IMatch.ITool>): any /* objectstream*/ {\n    perf('matchTools');\n    debuglog(\" matchedTools\" + JSON.stringify(matchedTools, undefined, 2));\n    return matchedTools;\n  }\n}\n\n/**\n * TODO: rework this to work correctly with sets\n */\n\nexport function isComplete(match :  IMatch.IToolMatch) {\n  // TODO -> analyze sets\n  return match && match.rank > 0.6 &&\n    Object.keys(match.toolmatchresult.missing ||{}).length === 0\n}\n\nexport function getPrompt(match :  IMatch.IToolMatch) {\n  if(!match) {\n      return;\n  }\n  if (match.rank < 0.6 ) {\n    return undefined;\n  }\n  if(Object.keys(match.toolmatchresult.missing).length ) {\n    var missing = Object.keys(match.toolmatchresult.missing)[0];\n    return {\n      category : missing,\n      text : 'Please provide a missing \"' + missing + '\"?'\n    }\n  }\n  return undefined;\n}\n\n\nexport function setPrompt(match : IMatch.IToolMatch, prompt: IMatch.IPrompt,\n  response : string) {\n    if(!match) {\n      return;\n    }\n    if (response.toLowerCase() !== 'cancel' && response.toLowerCase() !== 'abort') {\n      var u = {} as IMatch.IWord;\n      u.category = prompt.category;\n      u._ranking = 1.0;\n      u.matchedString = response;\n      /// TODO test whether this can be valid at all?\n      match.toolmatchresult.required[prompt.category] = u;\n      delete match.toolmatchresult.missing[prompt.category];\n   }\n}\n\n\n"],"sourceRoot":"ABC"}