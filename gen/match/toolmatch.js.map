{"version":3,"sources":["/projects/nodejs/botbuilder/fdevstart/src/../src/match/toolmatch.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;GAUG;;AAEH,+CAA+C;AAE/C,+BAA+B;AAE/B,MAAM,QAAQ,GAAG,KAAK,CAAC,WAAW,CAAC,CAAC;AAEpC;;;;;;;;;;;;;;;;;;;;;;;;;EAyBE;AAEF,uCAA+C;AAE/C,oBAAoB,IAAuB,EAAE,CAAU,EAAE,CAAQ;IAC/D,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AACpD,CAAC;AAGD;;;GAGG;AACH,0BAAiC,CAAqB;IACpD,IAAI,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,UAAS,OAAO;QACjE,IAAI,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAChC,QAAQ,CAAC,wBAAwB,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QAC9E,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,UAAS,QAAiB;YAC9C,IAAI,IAAI,GAAG,mBAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAC7D,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC;YAC9C,QAAQ,CAAC,yBAAyB,GAAG,QAAQ,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;YACzD,MAAM,CAAC,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,EAAE,CAAA,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;QAC7B,MAAM,CAAC,EAAE,CAAC,CAAC,aAAa;IAC1B,CAAC;IACD,IAAI,cAAc,GAAG,UAAU,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7D,YAAY,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAClC,QAAQ,CAAC,oBAAoB,GAAG,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IACxD,YAAY,GAAG,YAAY,CAAC,MAAM,CAAC,UAAS,IAAI;QAC9C,EAAE,CAAA,CAAC,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACf,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QAC5B,QAAQ,CAAC,+BAA+B,GAAG,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,EAAC,CAAC,CAAC,CAAC,CAAA;IACxH,CAAC;IACD,MAAM,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;AAC7B,CAAC;AA3BD,4CA2BC;AAED,6BAAoC,CAAqB;IACvD,IAAI,YAAY,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;IACvC,EAAE,CAAA,CAAC,YAAY,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;IACtC,CAAC;IACD,MAAM,CAAC,SAAS,CAAC;AACnB,CAAC;AAND,kDAMC;AAGD,0BAAkC,QAA2B,EAAE,UAAmB,EAAE,MAAuB;IAEzG,IAAI,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,UAAS,QAAQ;QACrD,IAAI,KAAK,GAAG,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC/B,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;YAChE,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACf,CAAC,CAAC,CAAC;IACH,EAAE,CAAA,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACR,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IACD,EAAE,CAAA,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QACvB,SAAS;QACT,QAAQ,CAAC,kCAAkC,GAAG,UAAU,GAAG,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAE,CAAA;QACtI,MAAM,CAAC,KAAK,CAAC;IAChB,CAAC;IACA,MAAM,CAAC,IAAI,CAAC;AACd,CAAC;AAlBD,4CAkBC;AAED,sBAA6B,CAAqB,EAAE,OAAyB;IAC3E,IAAI,GAAG,GAAG,EAAsB,CAAC;IACjC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,UAAS,QAAQ;QACnC,GAAG,CAAC,QAAQ,CAAC,GAAG,mBAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC;IACvF,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACnB,MAAM,CAAC,GAAG,CAAC;AACb,CAAC;AAPD,oCAOC;AAGD,wBAA+B,CAAqB,EAAE,MAAiB,EAAE,QAA2B;IAClG,IAAI,GAAG,GAAG,EAAgC,CAAC;IAC3C,MAAM,CAAC,OAAO,CAAC,UAAS,KAAK;QAC3B,IAAI,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC7B,IAAI,QAAQ,GAAG,YAAY,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QACpC,IAAI,eAAe,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAS,MAAM;YACnD,MAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAA;QACF,eAAe,CAAC,OAAO,CAAC,UAAS,MAAM;YACrC,GAAG,CAAC,IAAI,CAAC,EAAE,KAAK,EAAG,KAAK,EAAE,MAAM,EAAE,MAAM,EAAC,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IACF,aAAa;IACb,MAAM,CAAC,GAAG,CAAC;AACb,CAAC;AAdD,wCAcC;AAED,4BAAmC,eAAkC,EAAE,OAAyB;IAC9F,IAAI,MAAM,GAAG,gBAAgB,CAAC,eAAe,CAAC,CAAC;IAC/C,IAAI,GAAG,GAAG,cAAc,CAAC,eAAe,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;IAC3D,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACR,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAChB,CAAC;IACD,MAAM,CAAC,SAAS,CAAC;AACnB,CAAC;AAPD,gDAOC","file":"match/toolmatch.js","sourcesContent":["/**\n * @file toolmatch\n * @module jfseb.fdevstart.toolmatch\n * @copyright (c) Gerd Forstmann\n *\n * Methods operating on a matched tool,\n *\n * This will unify matching required and optional category words\n * with the requirements of the tool.\n *\n */\n\n// / <reference path=\"../../lib/node-4.d.ts\" />\n\nimport * as debug from 'debug';\nimport * as IMatch from './ifmatch';\nconst debuglog = debug('toolmatch');\n\n/*\nvar oToolFLP = {\n  'name': 'FLP',\n  'requires': { 'systemId': {}, 'client': {} },\n  \"optional\": {\n    \"fiori intent\": {}\n  },\n  \"sets\": {\n    \"intent\": {\n      \"set\": [\n        \"systemId\",\n        \"client\",\n        \"fiori intent\"\n      ],\n      \"response\": \"_urlpattern1\"\n    },\n    \"none\": {\n      \"set\": [\n        \"systemId\",\n        \"client\"\n      ],\n      \"response\": \"_urlpattern2\"\n    }\n  }\n};\n*/\n\nimport { Sentence as Sentence} from 'mgnlq_er';\n\nfunction cmpToolSet(sets : IMatch.IToolSets, a : string, b:string) {\n  return -(sets[a].set.length - sets[b].set.length);\n}\n\n\n/**\n * This onyl finds the best matching sets (=longest match)\n * independent of a record\n */\nexport function findMatchingSets(a : IMatch.IToolMatch ) : string[] {\n  var matchingSets = Object.keys(a.tool.sets).filter(function(sSetKey) {\n    var oSet = a.tool.sets[sSetKey];\n    debuglog('here the set for tool ' + a.tool.name + \" \" + JSON.stringify(oSet));\n    return oSet.set.every(function(category : string) :boolean {\n      var word = Sentence.findWordByCategory(a.sentence, category);\n      var b = !!(word && (word.word !== undefined));\n      debuglog(\"searchign for category \" + category + \" \" + b);\n      return b;\n    });\n  });\n  if(matchingSets.length === 0) {\n    return []; // undefined;\n  }\n  var cmpThisToolSet = cmpToolSet.bind(undefined, a.tool.sets);\n  matchingSets.sort(cmpThisToolSet);\n  debuglog(\"best sets ordered \" + matchingSets.join(\",\"));\n  matchingSets = matchingSets.filter(function(sKey) {\n    if(!cmpThisToolSet(matchingSets[0],sKey)) {\n      return true;\n    }\n    return false;\n  });\n  if (matchingSets.length > 1) {\n    debuglog(\"More than one set matches: \\\"\" + matchingSets.join('\";\"') + \"for match:\\n\" + JSON.stringify(a, undefined,2))\n  }\n  return matchingSets.sort();\n}\n\nexport function findBestMatchingSet(a : IMatch.IToolMatch) : IMatch.IToolSet {\n  var matchingSets = findMatchingSets(a);\n  if(matchingSets && matchingSets.length) {\n    return a.tool.sets[matchingSets[0]];\n  }\n  return undefined;\n}\n\n\nexport function isMatchingRecord( matchset : IMatch.IMatchSet, setcommand : string, record : IMatch.IRecord) {\n\n  var res = Object.keys(matchset).every(function(category) {\n    var value = matchset[category];\n    if ((value === record[category]) ||  (record[category] === '*')) {\n      return true;\n    }\n    return false;\n  });\n  if(!res) {\n    return false;\n  }\n  if(!record[setcommand]) {\n    // THROW?\n    debuglog(\"Matching record lacks setcommand\" + setcommand + \" match:\" + JSON.stringify(record) + \" match \" + JSON.stringify(matchset) )\n    return false;\n }\n  return true;\n}\n\nexport function makeMatchSet(a : IMatch.IToolMatch, toolset : IMatch.IToolSet) : IMatch.IMatchSet {\n  var res = {} as IMatch.IMatchSet;\n  toolset.set.forEach(function(category) {\n    res[category] = Sentence.findWordByCategory(a.sentence, category).word.matchedString;\n  });\n  Object.freeze(res);\n  return res;\n}\n\n\nexport function findSetRecords(a : IMatch.IToolMatch, setIds : string[], aRecords : IMatch.IRecord[]) : IMatch.IMatchedSetRecords {\n  var res = [] as IMatch.IMatchedSetRecord[];\n  setIds.forEach(function(setId) {\n    var set = a.tool.sets[setId];\n    var matchset = makeMatchSet(a, set);\n    var filteredRecords = aRecords.filter(function(record) {\n      return isMatchingRecord(matchset, set.response, record);\n    })\n    filteredRecords.forEach(function(record) {\n      res.push({ setId : setId, record: record});\n    })\n  })\n  // TODO SORT?\n  return res;\n}\n\nexport function findFirstSetRecord(toolMatchResult: IMatch.IToolMatch, records: IMatch.IRecord[]) : IMatch.IMatchedSetRecord {\n  var setIds = findMatchingSets(toolMatchResult);\n  var res = findSetRecords(toolMatchResult, setIds, records);\n  if (res) {\n    return res[0];\n  }\n  return undefined;\n}\n"],"sourceRoot":"ABC"}