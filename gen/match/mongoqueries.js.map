{"version":3,"sources":["/projects/nodejs/botbuilder/fdevstart/src/../src/match/mongoqueries.ts"],"names":[],"mappings":";AAAA;;;;;GAKG;;AAGH,gCAAgC;AAEhC,MAAM,QAAQ,GAAG,KAAK,CAAC,cAAc,CAAC,CAAC;AACvC,0CAA0C;AAC1C,IAAI,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;AAC1C,IAAI,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;AAkB5B,mCAAmC;AACnC,iDAAiD;AAEjD,IAAI,MAAM,GAAG,EAAE,CAAC;AAEhB,uBAAuB;AACvB,+BAA+B;AAC/B,mCAAmC;AAEnC,iBAAwB,KAAc,EAAE,QAAwB;IAC9D,MAAM,CAAC,sBAAM,CAAC,KAAK,CAAC,KAAK,EAAC,QAAQ,CAAC,CAAC,IAAI,CACtC,GAAG;QACD,QAAQ,CAAC,MAAI,oBAAoB,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,EAAC,SAAS,EAAC,CAAC,CAAC,CAAC,CAAC;QACrE,IAAI,YAAY,GAAG,EAAiC,CAAC;QACrD,GAAG,CAAC,YAAY,CAAC,GAAG,CAAE,CAAC,EAAE,EAAC,KAAK;YAC7B,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,UAAS,MAAM;gBAChC,YAAY,CAAC,IAAI,CAAE;oBACjB,MAAM,EAAG,EAAE;oBACX,UAAU,EAAG,EAAE,CAAC,OAAO;oBACvB,QAAQ,EAAG,EAAE,CAAC,QAAQ;oBACtB,MAAM,EAAG,MAAM;oBACf,QAAQ,EAAG,GAAG,CAAC,gCAAgC;iBAChD,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,MAAM,CAAC;YACL,YAAY,EAAG,YAAY;YAC3B,MAAM,EAAG,GAAG,CAAC,MAAM;YACnB,MAAM,EAAE,GAAG,CAAC,MAAM;SACnB,CAAA;IACH,CAAC,CACF,CAAA;AACH,CAAC;AAvBD,0BAuBC","file":"match/mongoqueries.js","sourcesContent":["/**\n *\n * @module jfseb.fdevstart.analyze\n * @file analyze.ts\n * @copyright (c) 2016 Gerd Forstmann\n */\n\n\nimport * as debug from 'debugf';\n\nconst debuglog = debug('mongoqueries');\nimport * as logger from '../utils/logger';\nvar logPerf = logger.perf(\"mongoqueries\");\nvar perflog = debug('perf');\n//const perflog = logger.perf(\"perflistall\");\n\nimport * as Utils from 'abot_utils';\n\nimport * as IMatch from './ifmatch';\n\nimport * as Toolmatcher from './toolmatcher';\n\nimport { BreakDown } from 'mgnlq_model';\n\nimport { Sentence as Sentence} from 'mgnlq_er';\n\nimport { Word as Word} from 'mgnlq_er';\nimport * as Operator from './operator';\nimport * as WhatIs from './whatis';\nimport { ErError as ErError} from 'mgnlq_er';\nimport { Model } from 'mgnlq_model';\n//import * as Match from './match';\nimport { MongoQ as MongoQ } from 'mgnlq_parser1';\n\nvar sWords = {};\n\n/* we have sentences */\n/* sentences lead to queries */\n/* queries have columns, results */\n\nexport function listAll(query : string, theModel: IMatch.IModels) : Promise<IMatch.IProcessedWhatIsTupelAnswers> {\n  return MongoQ.query(query,theModel).then(\n    res => {\n      debuglog(()=>'got a query result' + JSON.stringify(res,undefined,2));\n      var tupelanswers = [] as IMatch.IWhatIsTupelAnswer[];\n      res.queryresults.map( (qr,index) => {\n        qr.results.forEach(function(result) {\n          tupelanswers.push( {\n            record : {},\n            categories : qr.columns,\n            sentence : qr.sentence,\n            result : result,\n            _ranking : 1.0 // res.sentences[index]._ranking\n          });\n        });\n      });\n      return {\n        tupelanswers : tupelanswers,\n        errors : res.errors,\n        tokens: res.tokens\n      }\n    }\n  )\n}\n\n"],"sourceRoot":"ABC"}